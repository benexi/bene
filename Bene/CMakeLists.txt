# 解决方案
PROJECT (Bene CXX)

# 设置字符集
ADD_DEFINITIONS(-DUNICODE -D_UNICODE)

# 查找BOOST
FIND_PACKAGE(Boost)
IF(Boost_FOUND)
	# 增加包含目录
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
	# 增加链接目录
	LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
ELSE(Boost_FOUND)
	MESSAGE(FATAL_ERROR "Boost library not found !")
ENDIF(Boost_FOUND)

# 包含本目录
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

# 设置头文件
SET (HEADER_FILES
	Bene.hpp
	Precompile.h
	)

# 设置源文件
SET (SOURCE_FILES
	)
# 设置预编译头
IF(MSVC)

	SET(PCH_SOURCE_NAME "${CMAKE_CURRENT_BINARY_DIR}/Precompile.cpp")
	FILE(WRITE ${PCH_SOURCE_NAME} "#include \"Precompile.h\"")

	SET_SOURCE_FILES_PROPERTIES(${PCH_SOURCE_NAME} PROPERTIES COMPILE_FLAGS /Yc\"Precompile.h\")
	SET_SOURCE_FILES_PROPERTIES(${SOURCE_FILES} PROPERTIES COMPILE_FLAGS /Yu\"Precompile.h\")

	LIST(APPEND SOURCE_FILES ${PCH_SOURCE_NAME})
ENDIF()

# 查找Boost System库
IF(CMAKE_COMPILER_IS_GNUCXX)
	FIND_PACKAGE(Boost COMPONENTS system)
	SET(Boost_USE_STATIC_LIBS OFF)
	FIND_PACKAGE(Boost COMPONENTS thread)
ENDIF()

# 增加运行库项目
ADD_LIBRARY (Bene SHARED  ${HEADER_FILES} ${SOURCE_FILES} ${UPNP_FILES})

# 安装
INSTALL(TARGETS Bene
RUNTIME DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/../${BIN_PATH}
LIBRARY DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/../${LIB_PATH}
ARCHIVE DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/../${LIB_PATH}
)